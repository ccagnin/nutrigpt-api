// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  password = env("DATABASE_PASSWORD")
  user     = env("DATABASE_USER")
  pgdata   = env("PGDATA")
  pgdatabase = env("PGDATABASE")
  pghost = env("PGHOST")
  pgport = env("PGPORT")
  pgpassword = env("PGPASSWORD")
  pguser = env("PGUSER")
  postgresdb = env("POSTGRES_DB")
  postgrespassword = env("POSTGRES_PASSWORD")
  postgresuser = env("POSTGRES_USER")
  sslcertdays = env("SSL_CERT_DAYS")
}

model User {
  id              Int   @id @default(autoincrement())
  email           String   @unique
  name            String
  password        String
  isSubscribed    Boolean @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  measures        Measure?
  payments        Payments?
  subscriptions   Subscriptions?
  userInfo        UserInfo?
  userMenu        UserMenu?

  @@map(name: "users")
}

model Measure {
  measureId         Int  @id @default(autoincrement())
  initWeight        Int
  updatedWeight     Int?
  height            Int
  age               Int
  objective         Int @default(0)
  userId            Int @unique
  user              User @relation(fields: [userId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map(name: "measures")
}

model Payments {
  paymentId        Int  @id @default(autoincrement())
  userId           Int  @unique
  user             User @relation(fields: [userId], references: [id])
  status           String
  planId           Int  @unique
  plan             Plans @relation(fields: [planId], references: [planId])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map(name: "payments")
}

model Plans {
  planId           Int  @id @default(autoincrement())
  name             String
  price            Int
  description      String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  subscriptions    Subscriptions[]

  payments         Payments[]

  @@map(name: "plans")
}

model Subscriptions {
  subscriptionId   Int  @id @default(autoincrement())
  userId           Int  @unique
  user             User @relation(fields: [userId], references: [id])
  planId           Int  @unique
  plan             Plans @relation(fields: [planId], references: [planId])
  status           String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map(name: "subscriptions")
}

model UserInfo {
  infoId           Int  @id @default(autoincrement())
  userId           Int @unique
  user             User @relation(fields: [userId], references: [id])
  last_6_digits    String
  card_brand       String
  subscriptionType String
  subscriptionId   String
  payment_date     DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map(name: "user_info")
}

model UserMenu {
  menuId           Int  @id @default(autoincrement())
  userId           Int @unique
  user             User @relation(fields: [userId], references: [id])
  menu             String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map(name: "user_menu")
}
